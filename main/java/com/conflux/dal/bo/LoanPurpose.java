package com.conflux.dal.bo;

// Generated 17 Jan, 2013 8:44:06 PM by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * LoanPurpose generated by hbm2java
 */
@Entity
@Table(name = "loan_purpose", catalog = "risk_module", uniqueConstraints = @UniqueConstraint(columnNames = "external_id"))
public class LoanPurpose implements java.io.Serializable {

	private Integer loanPurposeId;
	private String name;
	private String description;
	private String externalId;
	private String loanPurposeType;
	private Set<LoanAccount> loanAccounts = new HashSet<LoanAccount>(0);
	private Set<LoanUtilizationCheck> loanUtilizationChecksForLoanPurposeId1 = new HashSet<LoanUtilizationCheck>(
			0);
	private Set<LoanUtilizationCheck> loanUtilizationChecksForLoanPurposeId2 = new HashSet<LoanUtilizationCheck>(
			0);
	private Set<LoanUtilizationCheck> loanUtilizationChecksForLoanPurposeId = new HashSet<LoanUtilizationCheck>(
			0);

	public LoanPurpose() {
	}

	public LoanPurpose(String name, String description, String externalId,
			String loanPurposeType, Set<LoanAccount> loanAccounts,
			Set<LoanUtilizationCheck> loanUtilizationChecksForLoanPurposeId1,
			Set<LoanUtilizationCheck> loanUtilizationChecksForLoanPurposeId2,
			Set<LoanUtilizationCheck> loanUtilizationChecksForLoanPurposeId) {
		this.name = name;
		this.description = description;
		this.externalId = externalId;
		this.loanPurposeType = loanPurposeType;
		this.loanAccounts = loanAccounts;
		this.loanUtilizationChecksForLoanPurposeId1 = loanUtilizationChecksForLoanPurposeId1;
		this.loanUtilizationChecksForLoanPurposeId2 = loanUtilizationChecksForLoanPurposeId2;
		this.loanUtilizationChecksForLoanPurposeId = loanUtilizationChecksForLoanPurposeId;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "loan_purpose_id", unique = true, nullable = false)
	public Integer getLoanPurposeId() {
		return this.loanPurposeId;
	}

	public void setLoanPurposeId(Integer loanPurposeId) {
		this.loanPurposeId = loanPurposeId;
	}

	@Column(name = "name", length = 45)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "description", length = 45)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "external_id", unique = true, length = 45)
	public String getExternalId() {
		return this.externalId;
	}

	public void setExternalId(String externalId) {
		this.externalId = externalId;
	}

	@Column(name = "loan_purpose_type", length = 21)
	public String getLoanPurposeType() {
		return this.loanPurposeType;
	}

	public void setLoanPurposeType(String loanPurposeType) {
		this.loanPurposeType = loanPurposeType;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "loanPurpose")
	public Set<LoanAccount> getLoanAccounts() {
		return this.loanAccounts;
	}

	public void setLoanAccounts(Set<LoanAccount> loanAccounts) {
		this.loanAccounts = loanAccounts;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "loanPurposeByLoanPurposeId1")
	public Set<LoanUtilizationCheck> getLoanUtilizationChecksForLoanPurposeId1() {
		return this.loanUtilizationChecksForLoanPurposeId1;
	}

	public void setLoanUtilizationChecksForLoanPurposeId1(
			Set<LoanUtilizationCheck> loanUtilizationChecksForLoanPurposeId1) {
		this.loanUtilizationChecksForLoanPurposeId1 = loanUtilizationChecksForLoanPurposeId1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "loanPurposeByLoanPurposeId2")
	public Set<LoanUtilizationCheck> getLoanUtilizationChecksForLoanPurposeId2() {
		return this.loanUtilizationChecksForLoanPurposeId2;
	}

	public void setLoanUtilizationChecksForLoanPurposeId2(
			Set<LoanUtilizationCheck> loanUtilizationChecksForLoanPurposeId2) {
		this.loanUtilizationChecksForLoanPurposeId2 = loanUtilizationChecksForLoanPurposeId2;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "loanPurposeByLoanPurposeId")
	public Set<LoanUtilizationCheck> getLoanUtilizationChecksForLoanPurposeId() {
		return this.loanUtilizationChecksForLoanPurposeId;
	}

	public void setLoanUtilizationChecksForLoanPurposeId(
			Set<LoanUtilizationCheck> loanUtilizationChecksForLoanPurposeId) {
		this.loanUtilizationChecksForLoanPurposeId = loanUtilizationChecksForLoanPurposeId;
	}

}
