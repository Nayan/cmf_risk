package com.conflux.dal.bo;

// Generated 17 Jan, 2013 8:44:06 PM by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * LoanAccount generated by hbm2java
 */
@Entity
@Table(name = "loan_account", catalog = "risk_module")
public class LoanAccount implements java.io.Serializable {

	private Integer loanAccountId;
	private LoanStatus loanStatus;
	private LoanPurpose loanPurpose;
	private Customer customer;
	private LoanProduct loanProduct;
	private Boolean pendingLuc;
	private Boolean updateNotification;
	private Float amount;
	private String externalId;
	private Date createdDate;
	private Date updatedDate;
	private String createdBy;
	private String updatedBy;
	private Date targetCompletionDate;
	private Set<LoanUtilizationCheck> loanUtilizationChecks = new HashSet<LoanUtilizationCheck>(
			0);

	public LoanAccount() {
	}

	public LoanAccount(LoanStatus loanStatus, LoanPurpose loanPurpose,
			Customer customer, LoanProduct loanProduct) {
		this.loanStatus = loanStatus;
		this.loanPurpose = loanPurpose;
		this.customer = customer;
		this.loanProduct = loanProduct;
	}

	public LoanAccount(LoanStatus loanStatus, LoanPurpose loanPurpose,
			Customer customer, LoanProduct loanProduct, Boolean pendingLuc,
			Boolean updateNotification, Float amount, String externalId,
			Date createdDate, Date updatedDate, String createdBy,
			String updatedBy, Date targetCompletionDate,
			Set<LoanUtilizationCheck> loanUtilizationChecks) {
		this.loanStatus = loanStatus;
		this.loanPurpose = loanPurpose;
		this.customer = customer;
		this.loanProduct = loanProduct;
		this.pendingLuc = pendingLuc;
		this.updateNotification = updateNotification;
		this.amount = amount;
		this.externalId = externalId;
		this.createdDate = createdDate;
		this.updatedDate = updatedDate;
		this.createdBy = createdBy;
		this.updatedBy = updatedBy;
		this.targetCompletionDate = targetCompletionDate;
		this.loanUtilizationChecks = loanUtilizationChecks;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "loan_account_id", unique = true, nullable = false)
	public Integer getLoanAccountId() {
		return this.loanAccountId;
	}

	public void setLoanAccountId(Integer loanAccountId) {
		this.loanAccountId = loanAccountId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "loan_status_id", nullable = false)
	public LoanStatus getLoanStatus() {
		return this.loanStatus;
	}

	public void setLoanStatus(LoanStatus loanStatus) {
		this.loanStatus = loanStatus;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "loan_purpose_id", nullable = false)
	public LoanPurpose getLoanPurpose() {
		return this.loanPurpose;
	}

	public void setLoanPurpose(LoanPurpose loanPurpose) {
		this.loanPurpose = loanPurpose;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "customer_id", nullable = false)
	public Customer getCustomer() {
		return this.customer;
	}

	public void setCustomer(Customer customer) {
		this.customer = customer;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "loan_product_id", nullable = false)
	public LoanProduct getLoanProduct() {
		return this.loanProduct;
	}

	public void setLoanProduct(LoanProduct loanProduct) {
		this.loanProduct = loanProduct;
	}

	@Column(name = "pending_luc")
	public Boolean getPendingLuc() {
		return this.pendingLuc;
	}

	public void setPendingLuc(Boolean pendingLuc) {
		this.pendingLuc = pendingLuc;
	}

	@Column(name = "update_notification")
	public Boolean getUpdateNotification() {
		return this.updateNotification;
	}

	public void setUpdateNotification(Boolean updateNotification) {
		this.updateNotification = updateNotification;
	}

	@Column(name = "amount", precision = 12, scale = 0)
	public Float getAmount() {
		return this.amount;
	}

	public void setAmount(Float amount) {
		this.amount = amount;
	}

	@Column(name = "external_id", length = 45)
	public String getExternalId() {
		return this.externalId;
	}

	public void setExternalId(String externalId) {
		this.externalId = externalId;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "created_date", length = 10)
	public Date getCreatedDate() {
		return this.createdDate;
	}

	public void setCreatedDate(Date createdDate) {
		this.createdDate = createdDate;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "updated_date", length = 10)
	public Date getUpdatedDate() {
		return this.updatedDate;
	}

	public void setUpdatedDate(Date updatedDate) {
		this.updatedDate = updatedDate;
	}

	@Column(name = "created_by", length = 45)
	public String getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	@Column(name = "updated_by", length = 45)
	public String getUpdatedBy() {
		return this.updatedBy;
	}

	public void setUpdatedBy(String updatedBy) {
		this.updatedBy = updatedBy;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "target_completion_date", length = 10)
	public Date getTargetCompletionDate() {
		return this.targetCompletionDate;
	}

	public void setTargetCompletionDate(Date targetCompletionDate) {
		this.targetCompletionDate = targetCompletionDate;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "loanAccount")
	public Set<LoanUtilizationCheck> getLoanUtilizationChecks() {
		return this.loanUtilizationChecks;
	}

	public void setLoanUtilizationChecks(
			Set<LoanUtilizationCheck> loanUtilizationChecks) {
		this.loanUtilizationChecks = loanUtilizationChecks;
	}

}
