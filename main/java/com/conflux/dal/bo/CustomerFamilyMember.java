package com.conflux.dal.bo;

// Generated 17 Jan, 2013 8:44:06 PM by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * CustomerFamilyMember generated by hbm2java
 */
@Entity
@Table(name = "customer_family_member", catalog = "risk_module")
public class CustomerFamilyMember implements java.io.Serializable {

	private Integer customerFamilyMemberId;
	private Customer customer;
	private RelationshipType relationshipType;
	private String firstName;
	private String lastName;
	private Date dateOfBirth;
	private String gender;
	private Boolean unwell;
	private String healthDescription;
	private Boolean active;
	private String createdBy;
	private String updatedBy;
	private Date createdDate;
	private Date updatedDate;
	private Set<CustomerFamilyOccupation> customerFamilyOccupations = new HashSet<CustomerFamilyOccupation>(
			0);

	public CustomerFamilyMember() {
	}

	public CustomerFamilyMember(Customer customer,
			RelationshipType relationshipType) {
		this.customer = customer;
		this.relationshipType = relationshipType;
	}

	public CustomerFamilyMember(Customer customer,
			RelationshipType relationshipType, String firstName,
			String lastName, Date dateOfBirth, String gender, Boolean unwell,
			String healthDescription, Boolean active, String createdBy,
			String updatedBy, Date createdDate, Date updatedDate,
			Set<CustomerFamilyOccupation> customerFamilyOccupations) {
		this.customer = customer;
		this.relationshipType = relationshipType;
		this.firstName = firstName;
		this.lastName = lastName;
		this.dateOfBirth = dateOfBirth;
		this.gender = gender;
		this.unwell = unwell;
		this.healthDescription = healthDescription;
		this.active = active;
		this.createdBy = createdBy;
		this.updatedBy = updatedBy;
		this.createdDate = createdDate;
		this.updatedDate = updatedDate;
		this.customerFamilyOccupations = customerFamilyOccupations;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "customer_family_member_id", unique = true, nullable = false)
	public Integer getCustomerFamilyMemberId() {
		return this.customerFamilyMemberId;
	}

	public void setCustomerFamilyMemberId(Integer customerFamilyMemberId) {
		this.customerFamilyMemberId = customerFamilyMemberId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "customer_id", nullable = false)
	public Customer getCustomer() {
		return this.customer;
	}

	public void setCustomer(Customer customer) {
		this.customer = customer;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "relationship_type_id", nullable = false)
	public RelationshipType getRelationshipType() {
		return this.relationshipType;
	}

	public void setRelationshipType(RelationshipType relationshipType) {
		this.relationshipType = relationshipType;
	}

	@Column(name = "first_name", length = 45)
	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	@Column(name = "last_name", length = 45)
	public String getLastName() {
		return this.lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "date_of_birth", length = 10)
	public Date getDateOfBirth() {
		return this.dateOfBirth;
	}

	public void setDateOfBirth(Date dateOfBirth) {
		this.dateOfBirth = dateOfBirth;
	}

	@Column(name = "gender", length = 6)
	public String getGender() {
		return this.gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	@Column(name = "unwell")
	public Boolean getUnwell() {
		return this.unwell;
	}

	public void setUnwell(Boolean unwell) {
		this.unwell = unwell;
	}

	@Column(name = "health_description", length = 500)
	public String getHealthDescription() {
		return this.healthDescription;
	}

	public void setHealthDescription(String healthDescription) {
		this.healthDescription = healthDescription;
	}

	@Column(name = "active")
	public Boolean getActive() {
		return this.active;
	}

	public void setActive(Boolean active) {
		this.active = active;
	}

	@Column(name = "created_by", length = 45)
	public String getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	@Column(name = "updated_by", length = 45)
	public String getUpdatedBy() {
		return this.updatedBy;
	}

	public void setUpdatedBy(String updatedBy) {
		this.updatedBy = updatedBy;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "created_date", length = 10)
	public Date getCreatedDate() {
		return this.createdDate;
	}

	public void setCreatedDate(Date createdDate) {
		this.createdDate = createdDate;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "updated_date", length = 10)
	public Date getUpdatedDate() {
		return this.updatedDate;
	}

	public void setUpdatedDate(Date updatedDate) {
		this.updatedDate = updatedDate;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "customer_family_member_has_customer_family_occupation", catalog = "risk_module", joinColumns = { @JoinColumn(name = "customer_family_member_id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "customer_family_occupation_id", nullable = false, updatable = false) })
	public Set<CustomerFamilyOccupation> getCustomerFamilyOccupations() {
		return this.customerFamilyOccupations;
	}

	public void setCustomerFamilyOccupations(
			Set<CustomerFamilyOccupation> customerFamilyOccupations) {
		this.customerFamilyOccupations = customerFamilyOccupations;
	}

}
